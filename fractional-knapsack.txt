fractional_knapsack(weights, values, fractions, maxCapacity)
    numItems = length(values)
    ratio[numItems]
    
    // Compute value-to-weight ratio for each item
    for i = 0 to numItems - 1
        ratio[i] = values[i] / weights[i]
    
    // Sort items by value-to-weight ratio in descending order
    sort_descending(values, weights, ratio, numItems)
    
    totalValue = 0
    remainingCapacity = maxCapacity
    
    // Initialize fractions array to 0 (no items selected initially)
    for i = 0 to numItems - 1
        fractions[i] = 0.0  
    
    i = 1
    // Iterate through the sorted items
    while i <= numItems and remainingCapacity > 0
        // If the item fits completely, take it
        if weights[i] <= remainingCapacity
            fractions[i] = 1.0  // Take the whole item
            totalValue = totalValue + values[i]
            remainingCapacity = remainingCapacity - weights[i]
        
        // Otherwise, take the fraction that fits and break
        else
            fractions[i] = remainingCapacity / weights[i]  // Take only what fits
            totalValue = totalValue + (values[i] * fractions[i])
            i++     // next object
    
    // Return the maximum value that can be carried
    return totalValue

