/**
 * Huffman algorithm
 */

/**
 * @param nodes Nodes queue to encode
 */
Huffman(nodes):
  size = |nodes|
  queue = nodes     // queue is a min priority queue

  for (i = 1 to size - 1):
    z = new Node()      // allocate a new node

    z.left = queue.extract_min()
    z.right = queue.extract_min()

    z.frequency = z.left.frequency + z.right.frequency

    queue.add(z)

  return queue.extract_min()  // Huffman tree root
