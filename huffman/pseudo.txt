/**
 * Huffman algorithm
 */

/**
 * @param nodes Nodes queue to encode
 */

Huffman(nodes: queue<Node>) -> Node:
  size = queue.size()
  queue = new min_priority_queue()

  for (node in nodes):
    queue.add(node)

  for (i = 0 to size):
    z = new Node()

    z.left = queue.extract_min()
    z.right = queue.extract_min()

    z.frequency = z.left.frequency + z.right.frequency

    queue.add(z)

  return queue.extract_min()  // Huffman tree root
