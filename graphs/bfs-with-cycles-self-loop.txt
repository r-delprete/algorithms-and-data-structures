/**
 * visita DFS che tiene conto anche di cappi e cicli di un grafo
 */

cycles: int = 0
self_loops: int = 0

bfs(nodes, source_node) {
  for (node in nodes - source_node) {
    node.color = white;
    node.distance = inf;
    node.predecessor = null;
  }

  source_node.color = gray;
  source_node.distance = 0;
  source_node.predecessor = null;

  queue = new queue();
  queue.enqueue(source_node);

  while (!queue.is_empty()) {
    node = queue.dequeue();

    for (adj_node in node.adj) {
      if (adj_node == node) {
        self_loops++;
      } else if (adj_node.color == white) {
        adj_node.color = gray;
        adj_node.distance = d.node + 1;
        adj_node.predecessor = node;

        queue.enqueue(adj_node);
      } else if (adj_node.color == gray) {
        cycles++;
      }
    }

    node.color = black;
  }
}