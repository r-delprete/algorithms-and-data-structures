/**
 * Grafo che ritorna i pesi minimi non appartenenti all'mst
 * e dire che se un MST Ã¨ unico
 */

kruskal(graph) {
  set = new set();

  for (node in graph.nodes) {
    make_set(node);
  }

  sorted_edges = sort(graph.edges)    // sort graph edges by weight no-descending

  for (edge in sorted_edges) {
    if (find_set(edge.first_node) != find_set(edge.second_node)) {
      set.add(edge);
      union(edge.first_node, edge.second_node);
    }
  }

  return set;
}

make_set(node):
    node.parent = node
    node.rank = 0

find_set(node):
    if node.parent != node:
        node.parent = find_set(node.parent)   // path compression

    return node.parent

union(node1, node2):
    root1 = find_set(node1)
    root2 = find_set(node2)

    if root1 != root2:
        if root1.rank < root2.rank:
            root1.parent = root2    // join root1 under root2
        else if root2.rank < root1.rank:
            root2.parent = node1    // join root2 under root1
        else if root1.rank == root2.rank:
            root2.parent = root1    // join root2 under root1
            root1.rank += 1         // increase root1 rank

is_mst_unique(graph, mst) {
  for (edge in graph.edges) {
    if (edge not in mst) {
      for (mst_edge in mst) {
        if (edge.weight == mst_edge.weight) {
          return false
        }
      }
    }
  }

  return true
}

min_edges_not_in_MST(graph) {
  mst = kruskal(graph);

  min_edges_weights = [];
  min_weight = inf

  for (edge in graph.edges) {
    if (edge not in mst) {
      if (edge.weight < min_weight) {
        min_edges_weights = [edge.weight]
        min_weight = edge.weight
      } else if (edge.weight == min_weight) {
        min_edges_weights.add(edge.weight)
      }
    }
  }
  
  is_unique = is_mst_unique(graph, mst);

  return min_edges_not_in_MST, is_mst_unique;
}