/**
 * Prim algorithm
 */

prim(graph, source_node) {
  for (node in graph.nodes) {
    node.predecessor = null;
    node.key = inf;
  }

  source_node.key = 0;

  queue = new min_priority_queue();
  
  for (node in graph.nodes) {
    queue.add(node);
  }

  while(!queue.is_empty()) {
    node = queue.extract_min();

    for (adj_node in graph.adj(node)) {
      if (queue.includes(adj_node) && graph.weight(node, adj_node) < adj_node.key) {
        adj_node.predecessor = node;
        adj.key = graph.weight(node, adj_node);   // decrease key
      }
    }
  }
}