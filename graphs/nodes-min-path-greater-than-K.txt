/**
 * Dato un grafo G(V, E), un nodo s ed un intero K,
 * restituire il numero di nodi il cui cammino minimo
 * da s sia maggiore di K
 */

bfs_visit(graph, root) {
  for (node in graph.nodes) {
    node.predecessor = null;
    node.distance = inf;
    node.color = white;
  }

  root.predecessor = null;
  root.distance = 0;
  root.color = gray;

  queue = new queue();
  queue.enqueue(root);

  while (!queue.is_empty()) {
    node = queue.dequeue();

    for (adj_node in node.adj) {
      if (adj_node.color == white) {
        adj_node.predecessor = node;
        adj_node.distance = node.distance + 1;
        adj_node.color = gray;

        queue.enqueue(adj_node);
      }
    }

    node.color = black;
  }
}

get_nodes_min_path_greater_K(graph, root, K) {
  total_nodes = 0

  bfs_visit(graph, root)

  for (node in graph.nodes) {
    if (node.distance > K) {
      total_nodes++;
    }
  }

  return total_nodes;
}